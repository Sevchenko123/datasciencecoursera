{
    "contents" : "options(shiny.maxRequestSize=30*1024^2)\n\nlibrary(shiny)\nlibrary(data.table)\nlibrary(NLP)\nlibrary(tm)\n\n# Define server logic required to summarize and view the selected dataset\nshinyServer(function(input, output) {    \n        # Generate a summary of the dataset\n        output$Original <- renderText({\n                Original_Input <- input$obs\n                return(Original_Input)\n        })\n        \n        # Generate a summary of the dataset\n        output$Translated <- renderText({\n                Original_Input <- input$obs\n                Translated_Input <- Translate_Input(Original_Input)\n                return(Translated_Input)\n        })\n        \n        # Generate a summary of the dataset\n        output$BestGuess <- renderText({\n                Original_Input <- input$obs\n                Translated_Input <- Translate_Input(Original_Input)\n                BestGuess_Output <- \"The predicted next word will be here.\"\n                Split_Trans_Input <- Split_Translate_Input(Original_Input)\n                Word_Count <- length(Split_Trans_Input)\n                \n                if(Word_Count==1){\n                        BestGuess_Output <- Word_Count1(Split_Trans_Input)\n                }\n                if(Word_Count==2){\n                        BestGuess_Output <- Word_Count2(Split_Trans_Input)\n                }\n                if(Word_Count==3){\n                        BestGuess_Output <- Word_Count3(Split_Trans_Input)\n                }\n                if(Word_Count > 3){\n                        Words_to_Search <- c(Split_Trans_Input[Word_Count - 2],\n                                             Split_Trans_Input[Word_Count - 1],\n                                             Split_Trans_Input[Word_Count])\n                        BestGuess_Output <- Word_Count3(Words_to_Search)\n                }\n                return(BestGuess_Output)\n        })\n        \n        # Show the first \"n\" observations\n        output$view <- renderTable({\n                Original_Input <- input$obs\n                Split_Trans_Input <- Split_Translate_Input(Original_Input)\n                Word_Count <- length(Split_Trans_Input)\n                \n                if(Word_Count==1){\n                        BestGuess_Output <- Word_Count1(Split_Trans_Input)\n                }\n                if(Word_Count==2){\n                        BestGuess_Output <- Word_Count2(Split_Trans_Input)\n                }\n                if(Word_Count==3){\n                        BestGuess_Output <- Word_Count3(Split_Trans_Input)\n                }\n                if(Word_Count > 3){\n                        Words_to_Search <- c(Split_Trans_Input[Word_Count - 2],\n                                             Split_Trans_Input[Word_Count - 1],\n                                             Split_Trans_Input[Word_Count])\n                        BestGuess_Output <- Word_Count3(Words_to_Search)\n                }\n                \n                if(exists(\"AlternativeGuess\", where = -1)){\n                        AlternativeGuess\n                }else{\n                        XNgramsTable <- data.frame(Word=NA, Likelihood=NA)\n                }\n                \n        })\n})\n",
    "created" : 1462597865264.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "884668348",
    "id" : "A620BED3",
    "lastKnownWriteTime" : 1462598014,
    "path" : "~/Desktop/DS_Capstone/DS_2/Server.R",
    "project_path" : "Server.R",
    "properties" : {
        "tempName" : "Untitled2"
    },
    "source_on_save" : false,
    "type" : "r_source"
}