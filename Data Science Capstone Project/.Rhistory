library(shiny)
library(data.table)
library(NLP)
library(tm)
library(tm)
library(NLP)
library(data.table)
library(shiny)
Dataset <- fread("NgramTable_05percent_Datatable.txt")
Dataset <- fread("NgramTable_05percent_Datatable.txt")
head(Dataset)
setkeyv(Dataset, c('w1', 'w2', 'w3', 'w4', 'freq'))
Translate_Input <- function(Text){
Mod_Input <- tolower(Text)
Mod_Input <- stripWhitespace(Mod_Input)
Mod_Input <- gsub("[^\\p{L}\\s]+", "", Mod_Input, ignore.case=F, perl=T)
return(Mod_Input)
}
Split_Translate_Input <- function(Text){
Mod_Input <- tolower(Text)
Mod_Input <- stripWhitespace(Mod_Input)
Mod_Input <- gsub("[^\\p{L}\\s]+", "", Mod_Input, ignore.case=F, perl=T)
Split_Trans_Input <- unlist(strsplit(Mod_Input, " "))
return(Split_Trans_Input)
}
Word_Count1 <- function(TextInputA){
NgramsTable <<- Dataset[list("<s>", TextInputA[1])]
NgramsTable <<- NgramsTable[NgramsTable$w3!="<s>", ]
NgramsTable <<- NgramsTable[order(NgramsTable$freq, decreasing=TRUE), ]
#List Alternatives
AlternativeGuess <<- as.data.frame(NgramsTable)
AlternativeGuess <<- AlternativeGuess[1:5, c("w3", "freq")]
AlternativeGuess <<- AlternativeGuess[!is.na(AlternativeGuess$freq), ]
AlternativeGuess <<- AlternativeGuess[!duplicated(AlternativeGuess), ]
if(nrow(AlternativeGuess)==0){
AlternativeGuess <<- data.frame(Word=NA, Likelihood=NA)
}else{
AlternativeGuess$freq <- round(AlternativeGuess$freq/sum(AlternativeGuess$freq)*100, 1)
AlternativeGuess <<- AlternativeGuess
colnames(AlternativeGuess) <<- c("Word", "Likelihood")
rownames(AlternativeGuess) <<- NULL
}
Guess_Output <- NgramsTable$w3[1]
if(is.na(Guess_Output)|is.null(Guess_Output)){
Guess_Output <- "We're sorry. This app could not predict the next word. You either picked a rare word or possibly mispelled it."
}
return(Guess_Output)
}
Word_Count2 <- function(TextInputB){
NgramsTable <<- Dataset[list("<s>", TextInputB[1], TextInputB[2])]
NgramsTable <<- NgramsTable[NgramsTable$w4!="<s>", ]
NgramsTable <<- NgramsTable[order(NgramsTable$freq, decreasing=TRUE), ]
#List Alternatives
AlternativeGuess <<- as.data.frame(NgramsTable)
AlternativeGuess <<- AlternativeGuess[1:5, c("w4", "freq")]
AlternativeGuess <<- AlternativeGuess[!is.na(AlternativeGuess$freq), ]
AlternativeGuess <<- AlternativeGuess[!duplicated(AlternativeGuess), ]
if(nrow(AlternativeGuess)==0){
AlternativeGuess <<- data.frame(Word=NA, Likelihood=NA)
}else{
AlternativeGuess$freq <- round(AlternativeGuess$freq/sum(AlternativeGuess$freq)*100, 1)
AlternativeGuess <<- AlternativeGuess
colnames(AlternativeGuess) <<- c("Word", "Likelihood")
rownames(AlternativeGuess) <<- NULL
}
Guess_Output <- NgramsTable$w4[1]
if(is.na(Guess_Output)|is.null(Guess_Output)){
Guess_Output <- Word_Count1(TextInputB[2])
}
return(Guess_Output)
}
Word_Count3 <- function(TextInputC){
NgramsTable <<- Dataset[list("<s>", TextInputC[1], TextInputC[2], TextInputC[3])]
NgramsTable <<- NgramsTable[NgramsTable$w5!="<s>", ]
NgramsTable <<- NgramsTable[order(NgramsTable$freq, decreasing=TRUE), ]
#List Alternatives
AlternativeGuess <<- as.data.frame(NgramsTable)
AlternativeGuess <<- AlternativeGuess[1:5, c("w5", "freq")]
AlternativeGuess <<- AlternativeGuess[!is.na(AlternativeGuess$freq), ]
AlternativeGuess <<- AlternativeGuess[!duplicated(AlternativeGuess), ]
if(nrow(AlternativeGuess)==0){
AlternativeGuess <<- data.frame(Word=NA, Likelihood=NA)
}else{
AlternativeGuess$freq <- round(AlternativeGuess$freq/sum(AlternativeGuess$freq)*100, 1)
AlternativeGuess <<- AlternativeGuess
colnames(AlternativeGuess) <<- c("Word", "Likelihood")
rownames(AlternativeGuess) <<- NULL
}
Guess_Output <- NgramsTable$w5[1]
if(is.na(Guess_Output)|is.null(Guess_Output)){
Shortened_Input <- c(TextInputC[2], TextInputC[3])
Guess_Output <- Word_Count2(Shortened_Input)
if(is.na(Guess_Output)|is.null(Guess_Output)){
Guess_Output <- Word_Count1(TextInputC[3])
}
}
return(Guess_Output)
}
library(shiny)
# Define UI for dataset viewer application
shinyUI(fluidPage(
# Application title.
titlePanel("The Next Word"),
sidebarLayout(
sidebarPanel(
textInput("obs", "Enter Your Statement Here:"),
helpText("Note: This widget will use this statement to predict the most likely next word."),
submitButton("Predict Next Word")
),
mainPanel(
h6("You input the following text:"),
textOutput("Original"),
br(),
h6("Your statement has been reformated to the following:"),
textOutput("Translated"),
br(),
br(),
h3("Most Likely Next Word:"),
div(textOutput("BestGuess"), style = "color:red"),
br(),
h3("The program guessed your word based on the following data:"),
tableOutput("view")
)
)
))
options(shiny.maxRequestSize=30*1024^2)
library(shiny)
library(data.table)
library(NLP)
library(tm)
# Define server logic required to summarize and view the selected dataset
shinyServer(function(input, output) {
# Generate a summary of the dataset
output$Original <- renderText({
Original_Input <- input$obs
return(Original_Input)
})
# Generate a summary of the dataset
output$Translated <- renderText({
Original_Input <- input$obs
Translated_Input <- Translate_Input(Original_Input)
return(Translated_Input)
})
# Generate a summary of the dataset
output$BestGuess <- renderText({
Original_Input <- input$obs
Translated_Input <- Translate_Input(Original_Input)
BestGuess_Output <- "The predicted next word will be here."
Split_Trans_Input <- Split_Translate_Input(Original_Input)
Word_Count <- length(Split_Trans_Input)
if(Word_Count==1){
BestGuess_Output <- Word_Count1(Split_Trans_Input)
}
if(Word_Count==2){
BestGuess_Output <- Word_Count2(Split_Trans_Input)
}
if(Word_Count==3){
BestGuess_Output <- Word_Count3(Split_Trans_Input)
}
if(Word_Count > 3){
Words_to_Search <- c(Split_Trans_Input[Word_Count - 2],
Split_Trans_Input[Word_Count - 1],
Split_Trans_Input[Word_Count])
BestGuess_Output <- Word_Count3(Words_to_Search)
}
return(BestGuess_Output)
})
# Show the first "n" observations
output$view <- renderTable({
Original_Input <- input$obs
Split_Trans_Input <- Split_Translate_Input(Original_Input)
Word_Count <- length(Split_Trans_Input)
if(Word_Count==1){
BestGuess_Output <- Word_Count1(Split_Trans_Input)
}
if(Word_Count==2){
BestGuess_Output <- Word_Count2(Split_Trans_Input)
}
if(Word_Count==3){
BestGuess_Output <- Word_Count3(Split_Trans_Input)
}
if(Word_Count > 3){
Words_to_Search <- c(Split_Trans_Input[Word_Count - 2],
Split_Trans_Input[Word_Count - 1],
Split_Trans_Input[Word_Count])
BestGuess_Output <- Word_Count3(Words_to_Search)
}
if(exists("AlternativeGuess", where = -1)){
AlternativeGuess
}else{
XNgramsTable <- data.frame(Word=NA, Likelihood=NA)
}
})
})
shiny::runApp()
head(Dataset)
setkeyv(Dataset, c('w1', 'w2', 'w3', 'w4', 'freq'))
library(shiny)
library(data.table)
library(NLP)
library(tm)
setkeyv(Dataset, c('w1', 'w2', 'w3', 'w4', 'freq'))
head(Dataset)
D <- Dataset[1:10000,]
D <- Dataset[1:100,]
View(D)
D[list("<s>")]
D[list("<s>","bachelors")]
D[list("<s>",bachelors)]
shiny::runApp()
D[list("<s>",bachelors)]
D[list("<s>", "awesome")]
Split_Translate_Input("I am Samir")
s <- Split_Translate_Input("I am Samir")
s[1]
rm(s)
D["<s>", "awesome"]
D[, "awesome"]
View(D)
WordCount1(Split_Trans_Input("I am"))
shiny::runApp()
shiny::runApp()
library(shiny)
library(data.table)
library(NLP)
library(tm)
Dataset <- fread("NgramTable_05percent_Datatable.txt")
setkeyv(Dataset, c('w1', 'w2', 'w3', 'w4', 'freq'))
Translate_Input <- function(Text){
Mod_Input <- tolower(Text)
Mod_Input <- stripWhitespace(Mod_Input)
Mod_Input <- gsub("[^\\p{L}\\s]+", "", Mod_Input, ignore.case=F, perl=T)
return(Mod_Input)
}
Split_Translate_Input <- function(Text){
Mod_Input <- tolower(Text)
Mod_Input <- stripWhitespace(Mod_Input)
Mod_Input <- gsub("[^\\p{L}\\s]+", "", Mod_Input, ignore.case=F, perl=T)
Split_Trans_Input <- unlist(strsplit(Mod_Input, " "))
return(Split_Trans_Input)
}
Word_Count1 <- function(TextInputA){
NgramsTable <<- Dataset[list("<s>", TextInputA[1])]
NgramsTable <<- NgramsTable[NgramsTable$w3!="<s>", ]
NgramsTable <<- NgramsTable[order(NgramsTable$freq, decreasing=TRUE), ]
#List Alternatives
AlternativeGuess <<- as.data.frame(NgramsTable)
AlternativeGuess <<- AlternativeGuess[1:10, c("w3", "freq")]
AlternativeGuess <<- AlternativeGuess[!is.na(AlternativeGuess$freq), ]
AlternativeGuess <<- AlternativeGuess[!duplicated(AlternativeGuess), ]
if(nrow(AlternativeGuess)==0){
AlternativeGuess <<- data.frame(Word=NA, Likelihood=NA)
}else{
AlternativeGuess$freq <- round(AlternativeGuess$freq/sum(AlternativeGuess$freq)*100, 1)
AlternativeGuess <<- AlternativeGuess
colnames(AlternativeGuess) <<- c("Word", "Likelihood")
rownames(AlternativeGuess) <<- NULL
}
Guess_Output <- NgramsTable$w3[1]
if(is.na(Guess_Output)|is.null(Guess_Output)){
Guess_Output <- "We're sorry. This app could not predict the next word. You either picked a rare word or possibly mispelled it."
}
return(Guess_Output)
}
Word_Count2 <- function(TextInputB){
NgramsTable <<- Dataset[list("<s>", TextInputB[1], TextInputB[2])]
NgramsTable <<- NgramsTable[NgramsTable$w4!="<s>", ]
NgramsTable <<- NgramsTable[order(NgramsTable$freq, decreasing=TRUE), ]
#List Alternatives
AlternativeGuess <<- as.data.frame(NgramsTable)
AlternativeGuess <<- AlternativeGuess[1:10, c("w4", "freq")]
AlternativeGuess <<- AlternativeGuess[!is.na(AlternativeGuess$freq), ]
AlternativeGuess <<- AlternativeGuess[!duplicated(AlternativeGuess), ]
if(nrow(AlternativeGuess)==0){
AlternativeGuess <<- data.frame(Word=NA, Likelihood=NA)
}else{
AlternativeGuess$freq <- round(AlternativeGuess$freq/sum(AlternativeGuess$freq)*100, 1)
AlternativeGuess <<- AlternativeGuess
colnames(AlternativeGuess) <<- c("Word", "Likelihood")
rownames(AlternativeGuess) <<- NULL
}
Guess_Output <- NgramsTable$w4[1]
if(is.na(Guess_Output)|is.null(Guess_Output)){
Guess_Output <- Word_Count1(TextInputB[2])
}
return(Guess_Output)
}
Word_Count3 <- function(TextInputC){
NgramsTable <<- Dataset[list("<s>", TextInputC[1], TextInputC[2], TextInputC[3])]
NgramsTable <<- NgramsTable[NgramsTable$w5!="<s>", ]
NgramsTable <<- NgramsTable[order(NgramsTable$freq, decreasing=TRUE), ]
#List Alternatives
AlternativeGuess <<- as.data.frame(NgramsTable)
AlternativeGuess <<- AlternativeGuess[1:10, c("w5", "freq")]
AlternativeGuess <<- AlternativeGuess[!is.na(AlternativeGuess$freq), ]
AlternativeGuess <<- AlternativeGuess[!duplicated(AlternativeGuess), ]
if(nrow(AlternativeGuess)==0){
AlternativeGuess <<- data.frame(Word=NA, Likelihood=NA)
}else{
AlternativeGuess$freq <- round(AlternativeGuess$freq/sum(AlternativeGuess$freq)*100, 1)
AlternativeGuess <<- AlternativeGuess
colnames(AlternativeGuess) <<- c("Word", "Likelihood")
rownames(AlternativeGuess) <<- NULL
}
Guess_Output <- NgramsTable$w5[1]
if(is.na(Guess_Output)|is.null(Guess_Output)){
Shortened_Input <- c(TextInputC[2], TextInputC[3])
Guess_Output <- Word_Count2(Shortened_Input)
if(is.na(Guess_Output)|is.null(Guess_Output)){
Guess_Output <- Word_Count1(TextInputC[3])
}
}
return(Guess_Output)
}
shiny::runApp()
options(shiny.maxRequestSize=30*1024^2)
library(shiny)
library(data.table)
library(NLP)
library(tm)
shinyServer(function(input, output) {
# Generate a summary of the dataset
output$Original <- renderText({
Original_Input <- input$obs
return(Original_Input)
})
# Generate a summary of the dataset
output$Translated <- renderText({
Original_Input <- input$obs
Translated_Input <- Translate_Input(Original_Input)
return(Translated_Input)
})
# Generate a summary of the dataset
output$BestGuess <- renderText({
Original_Input <- input$obs
Translated_Input <- Translate_Input(Original_Input)
BestGuess_Output <- "The predicted next word will be here."
Split_Trans_Input <- Split_Translate_Input(Original_Input)
Word_Count <- length(Split_Trans_Input)
if(Word_Count==1){
BestGuess_Output <- Word_Count1(Split_Trans_Input)
}
if(Word_Count==2){
BestGuess_Output <- Word_Count2(Split_Trans_Input)
}
if(Word_Count==3){
BestGuess_Output <- Word_Count3(Split_Trans_Input)
}
if(Word_Count > 3){
Words_to_Search <- c(Split_Trans_Input[Word_Count - 2],
Split_Trans_Input[Word_Count - 1],
Split_Trans_Input[Word_Count])
BestGuess_Output <- Word_Count3(Words_to_Search)
}
return(BestGuess_Output)
})
# Show the first "n" observations
output$view <- renderTable({
Original_Input <- input$obs
Split_Trans_Input <- Split_Translate_Input(Original_Input)
Word_Count <- length(Split_Trans_Input)
if(Word_Count==1){
BestGuess_Output <- Word_Count1(Split_Trans_Input)
}
if(Word_Count==2){
BestGuess_Output <- Word_Count2(Split_Trans_Input)
}
if(Word_Count==3){
BestGuess_Output <- Word_Count3(Split_Trans_Input)
}
if(Word_Count > 3){
Words_to_Search <- c(Split_Trans_Input[Word_Count - 2],
Split_Trans_Input[Word_Count - 1],
Split_Trans_Input[Word_Count])
BestGuess_Output <- Word_Count3(Words_to_Search)
}
if(exists("AlternativeGuess", where = -1)){
AlternativeGuess
}else{
XNgramsTable <- data.frame(Word=NA, Likelihood=NA)
}
})
})
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(Dataset)
View(Dataset)
shiny::runApp()
shiny::runApp()
author: Samir Yelne
author:Samir Yelne
date: Jun 6th, 2016
date:Jun 6th, 2016
What is TheNextWord?
shiny::runApp()
shiny::runApp()
shiny::runApp()
rsconnect::setAccountInfo(name='samiryelne', token='DF955BFE965C2D1A44F2D20905055062', secret='ll07jcVLSRKrmnGIzLR7YBeQ1T08qCDc2vM8K6Pf')
shiny::runApp()
shinyapps::setAccountInfo
library(rsconnect)
rsconnect::setAccountInfo(name='samiryelne', token='DF955BFE965C2D1A44F2D20905055062', secret='ll07jcVLSRKrmnGIzLR7YBeQ1T08qCDc2vM8K6Pf')
shiny::runApp()
shiny::runApp()
deployApp()
shiny::runApp()
